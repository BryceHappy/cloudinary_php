<?php
/**
 * This file is part of the Cloudinary PHP package.
 *
 * (c) Cloudinary
 *
 * For the full copyright and license information, please view the LICENSE
 * file that was distributed with this source code.
 */

namespace Cloudinary\Test\Asset;

use Cloudinary\Asset\Video;
use Cloudinary\Tag\VideoTag;
use Cloudinary\Transformation\Angle;
use Cloudinary\Transformation\Scale;

/**
 * Class VideoTagTest
 */
final class VideoTagTest extends TagTestCase
{
    protected $video;

    protected $defaultSourcesStr =
        '<source src="https://res.cloudinary.com/test123/video/upload/vc_h265/sample.mp4"' .
        ' type="video/mp4; codecs=hev1">' . "\n" .
        '<source src="https://res.cloudinary.com/test123/video/upload/vc_vp9/sample.webm"' .
        ' type="video/webm; codecs=vp9">' . "\n" .
        '<source src="https://res.cloudinary.com/test123/video/upload/vc_auto/sample.mp4" type="video/mp4">' . "\n" .
        '<source src="https://res.cloudinary.com/test123/video/upload/vc_auto/sample.webm" type="video/webm">';

    protected $posterAttr = 'poster="https://res.cloudinary.com/test123/video/upload/sample.jpg"';

    public function setUp()
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->video = new Video(self::VIDEO_NAME);
    }

    public function testVideoTag()
    {
        $tag = new VideoTag(self::VIDEO_NAME);

        $expected = "<video {$this->posterAttr}>\n{$this->defaultSourcesStr}\n</video>";

        $this->assertEquals(
            (string)$expected,
            (string)$tag
        );

        $this->assertEquals(
            (string)$expected,
            (string)VideoTag::upload(self::VIDEO_NAME)
        );
    }

    public function testVideoTagWithTransformation()
    {
        $video = (new Video(self::VIDEO_NAME))->rotate(Angle::angle(17))->resize(Scale::scale(500));
        $tag   = new VideoTag($video, []);

        $expectedPoster = 'https://res.cloudinary.com/test123/video/upload/a_17/c_scale,w_500/sample.jpg';
        $expected       = "<video src=\"$video\" poster=\"{$expectedPoster}\"></video>";

        $this->assertEquals(
            (string)$expected,
            (string)$tag
        );
    }

    public function testVideoTagNoSources()
    {
        $tag = new VideoTag(self::VIDEO_NAME, []);

        $expected = "<video src=\"{$this->video}\" $this->posterAttr></video>";
        $this->assertEquals(
            (string)$expected,
            (string)$tag
        );
    }

    public function testVideoTagAssetConfigurationBuilders()
    {
        $tag = new VideoTag(self::VIDEO_NAME, []);

        $customPosterAttr = str_replace(self::CLOUD_NAME, self::CUSTOM_CLOUD_NAME, $this->posterAttr);
        $expected         = "<video src=\"{$this->video->cloudName(self::CUSTOM_CLOUD_NAME)}\" $customPosterAttr>" .
                            '</video>';
        $this->assertEquals(
            $expected,
            (string)$tag->cloudName(self::CUSTOM_CLOUD_NAME)
        );
    }

    public function testVideoTagWithFallback()
    {
        $fallback = '<span id="spanid">Cannot display video</span>';

        $tag = (new VideoTag(self::VIDEO_NAME))->fallback($fallback);

        $expected = "<video {$this->posterAttr}>\n{$fallback}\n{$this->defaultSourcesStr}\n</video>";
        $this->assertEquals(
            (string)$expected,
            (string)$tag
        );
    }

    public function testVideoTagWithAttributes()
    {
        $attributes = [
            'autoplay' => true,
            'preload'  => false,
            'controls',
            'loop',
            'muted'    => 'true',
            'style'    => 'border: 1px',
        ];

        $tag = (new VideoTag(self::VIDEO_NAME, []))->setAttributes($attributes);

        $expected = "<video src=\"{$this->video}\" autoplay controls loop muted=\"true\" style=\"border: 1px\" " .
                    "$this->posterAttr>" .
                    '</video>';
        $this->assertEquals(
            $expected,
            (string)$tag
        );
    }
}
